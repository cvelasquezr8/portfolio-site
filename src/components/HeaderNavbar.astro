---
import { languagesList } from '../i18n/ui';
import { useTranslations } from '../i18n/utils';

const pathPage = (globalThis as any).BASE_URL;
const currentLang = Astro.currentLocale || 'en';
const translations = useTranslations(currentLang as keyof typeof languagesList);

const languages = [
	{ code: 'en', label: 'English', flag: `${pathPage}images/flag-usa.png` },
	{ code: 'es', label: 'EspaÃ±ol', flag: `${pathPage}images/flag-spain.png` },
];

interface NavigationLink {
	name: string;
	href: string;
}

const navigationLinks: NavigationLink[] = [
	{
		name: translations('nav.home'),
		href: '#',
	},
	{
		name: translations('nav.skills'),
		href: '#technologies',
	},
	{
		name: translations('nav.projects'),
		href: '#projects',
	},
	{
		name: translations('nav.challenges'),
		href: '#challenges',
	},
	{
		name: translations('nav.certificates'),
		href: '#courses',
	},
	{
		name: translations('nav.contact'),
		href: '#contact',
	},
];
---

<script>
	const savedLang = localStorage.getItem('lang');
	if (!savedLang) {
		const currentLang = window.location.pathname.startsWith('/en')
			? 'en'
			: 'es';
		localStorage.setItem('lang', currentLang ?? 'en');
	}

	(window as any).changeLanguage = function (lang: string = 'en') {
		localStorage.setItem('lang', lang);
		const newUrl = `${window.location.origin}${(globalThis as any).BASE_URL || '/'}${lang}/`;
		window.location.href = newUrl;
	};
</script>

<header
	class="fixed top-0 left-0 right-0 z-50 bg-gray-900/80 backdrop-blur-lg border-b border-blue-500/20"
>
	<div class="container mx-auto px-4">
		<nav class="flex items-center justify-between h-16">
			<!-- Logo -->
			<div
				class="text-2xl font-bold gradient-text flex items-center gap-2 flex-shrink-0"
			>
				<div
					class="w-10 h-10 rounded-lg bg-gradient-to-r from-blue-600 to-purple-600 flex items-center justify-center text-white"
				>
					ðŸš€
				</div>
				<span class="hidden sm:inline"> Carlos Velasquez </span>
			</div>

			<!-- Desktop Navigation -->
			<div class="hidden lg:flex items-center space-x-8">
				{
					navigationLinks.map((link) => (
						<a
							href={link.href}
							class="text-text-color hover:text-blue-400 transition-colors text-sm"
						>
							{link.name}
						</a>
					))
				}
			</div>

			<!-- Language Selector - Desktop -->
			<div class="hidden lg:block relative">
				<button
					class="bg-gray-900 text-white border border-blue-500/20 rounded p-2 flex items-center space-x-2 hover:border-blue-500/40 transition-colors"
				>
					<img
						src={languages.find((lang) => lang.code === currentLang)
							?.flag}
						alt={currentLang}
						class="w-4 h-4"
						loading="lazy"
					/>
					<span class="text-sm"
						>{
							languages.find((lang) => lang.code === currentLang)
								?.label
						}</span
					>
					<span class="text-xs">â–¼</span>
				</button>

				<ul
					class="absolute right-0 mt-2 bg-gray-900 border border-blue-500/20 rounded-lg shadow-lg hidden py-1 min-w-[120px]"
				>
					{
						languages.map((lang) => (
							<li
								class="hover:bg-blue-500/20 cursor-pointer transition-colors"
								onclick={`window.changeLanguage('${lang.code}')`}
							>
								<div class="flex items-center space-x-2 px-3 py-2">
									<img
										src={lang.flag}
										alt={lang.label}
										class="w-4 h-4"
										loading="lazy"
									/>
									<span class="text-sm">{lang.label}</span>
								</div>
							</li>
						))
					}
				</ul>
			</div>

			<!-- Mobile Menu Button -->
			<button
				class="lg:hidden p-2 text-text-color hover:text-blue-400 transition-colors"
				id="mobile-menu-button"
				aria-label="Toggle menu"
			>
				<svg
					xmlns="http://www.w3.org/2000/svg"
					class="h-6 w-6"
					fill="none"
					viewBox="0 0 24 24"
					stroke="currentColor"
				>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M4 6h16M4 12h16M4 18h16"></path>
				</svg>
			</button>
		</nav>

		<!-- Mobile Menu -->
		<div
			class="lg:hidden transition-all duration-300 ease-in-out max-h-0 overflow-hidden bg-gray-900/95"
			id="mobile-menu"
		>
			<div class="py-2 space-y-1">
				{
					navigationLinks.map((link) => (
						<a
							href={link.href}
							class="block text-text-color hover:text-blue-400 transition-colors px-4 py-2 text-sm"
						>
							{link.name}
						</a>
					))
				}
				<!-- Language Selector - Mobile -->
				<div class="px-4 py-2 border-t border-blue-500/20 mt-2">
					<p class="text-sm text-blue-500 mb-2">Language</p>
					<div class="flex flex-col space-y-2">
						{
							languages.map((lang) => (
								<button
									onclick={`window.changeLanguage('${lang.code}')`}
									class="flex items-center space-x-2 text-text-color hover:text-blue-400 transition-colors"
								>
									<img
										src={lang.flag}
										alt={lang.label}
										class="w-4 h-4"
										loading="lazy"
									/>
									<span class="text-sm">{lang.label}</span>
								</button>
							))
						}
					</div>
				</div>
			</div>
		</div>
	</div>
</header>

<style>
	/* Desktop language selector dropdown */
	button:focus + ul,
	ul:hover {
		display: block;
	}

	/* Mobile menu animation */
	#mobile-menu {
		transition: max-height 0.3s ease-in-out;
	}
</style>

<script>
	// Mobile menu toggle with smooth animation
	const mobileMenuButton = document.getElementById('mobile-menu-button');
	const mobileMenu = document.getElementById('mobile-menu');
	let isMenuOpen = false;

	if (mobileMenuButton && mobileMenu) {
		mobileMenuButton.addEventListener('click', () => {
			isMenuOpen = !isMenuOpen;
			// Update max-height for smooth animation
			if (isMenuOpen) {
				mobileMenu.style.maxHeight = '100vh';
				mobileMenu.style.height = '100vh';
			} else {
				mobileMenu.style.maxHeight = '0';
			}
		});

		// Close menu when clicking on a link
		const mobileLinks = mobileMenu.querySelectorAll('a');
		mobileLinks.forEach((link) => {
			link.addEventListener('click', () => {
				isMenuOpen = false;
				mobileMenu.style.maxHeight = '0';
			});
		});

		// Close menu on window resize if screen becomes large
		window.addEventListener('resize', () => {
			if (isMenuOpen) {
				mobileMenu.style.maxHeight = '100vh';
			}
		});
	}
</script>
