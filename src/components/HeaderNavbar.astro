---
import { languagesList } from '../i18n/ui';
import { useTranslations } from '../i18n/utils';

const pathPage = (globalThis as any).BASE_URL;
const currentLang = Astro.currentLocale || 'en';
const translations = useTranslations(currentLang as keyof typeof languagesList);

const languages = [
	{ code: 'en', label: 'English', flag: `${pathPage}images/flag-usa.png` },
	{ code: 'es', label: 'EspaÃ±ol', flag: `${pathPage}images/flag-spain.png` },
];

interface NavigationLink {
	name: string;
	href: string;
}

const navigationLinks: NavigationLink[] = [
	{
		name: translations('nav.home'),
		href: '#',
	},
	{
		name: translations('nav.skills'),
		href: '#technologies',
	},
	{
		name: translations('nav.projects'),
		href: '#projects',
	},
	{
		name: translations('nav.certificates'),
		href: '#courses',
	},
	{
		name: translations('nav.contact'),
		href: '#contact',
	},
];
---

<script>
	const savedLang = localStorage.getItem('lang');
	if (!savedLang) {
		const currentLang = window.location.pathname.startsWith('/en')
			? 'en'
			: 'es';
		localStorage.setItem('lang', currentLang ?? 'en');
	}

	(window as any).changeLanguage = function (lang: string = 'en') {
		localStorage.setItem('lang', lang);
		const newUrl = `${window.location.origin}${(globalThis as any).BASE_URL || '/'}${lang}/`;
		window.location.href = newUrl;
	};
</script>

<header
	class="fixed top-0 left-0 right-0 z-50 bg-gray-900/80 backdrop-blur-lg border-b border-blue-500/20"
>
	<div class="container mx-auto px-4">
		<nav class="flex items-center justify-between py-4">
			<div
				class="text-2xl font-bold gradient-text flex items-center gap-2"
			>
				<div
					class="w-10 h-10 rounded-lg bg-gradient-to-r from-blue-600 to-purple-600 flex items-center justify-center text-white"
				>
					ðŸš€
				</div>
				<span class="sm:inline items-center"> Carlos Velasquez </span>
			</div>

			<!-- Desktop Navigation -->
			<div class="hidden md:flex items-center gap-6">
				{
					navigationLinks.map((link) => (
						<a
							href={link.href}
							class="text-text-color hover:text-blue-400 transition-colors"
						>
							{link.name}
						</a>
					))
				}
			</div>

			<div class="relative inline-block text-left ml-10 hidden md:block">
				<button
					class="bg-gray-900 text-white border border-blue-500 rounded p-1 flex items-center"
				>
					<img
						src={languages.find((lang) => lang.code === currentLang)
							?.flag}
						alt={currentLang}
						class="w-4 h-4 mr-2"
					/>
					{languages.find((lang) => lang.code === currentLang)?.label}
					<span class="ml-2">â–¼</span>
				</button>

				<ul
					class="absolute bg-gray-900 border border-blue-500 rounded mt-1 hidden"
				>
					{
						languages.map((lang) => (
							<li
								class="flex items-center p-2 hover:bg-blue-500 cursor-pointer"
								onclick={`window.changeLanguage('${lang.code}')`}
							>
								<img
									src={lang.flag}
									alt={lang.label}
									class="w-4 h-4 mr-2"
								/>
								{lang.label}
							</li>
						))
					}
				</ul>
			</div>

			<!-- Mobile Menu Button -->
			<button
				class="md:hidden p-2 text-text-color hover:text-blue-400 transition-colors"
				id="mobile-menu-button"
				aria-label="Toggle menu"
			>
				<svg
					xmlns="http://www.w3.org/2000/svg"
					class="h-6 w-6"
					fill="none"
					viewBox="0 0 24 24"
					stroke="currentColor"
				>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M4 6h16M4 12h16M4 18h16"></path>
				</svg>
			</button>
		</nav>

		<!-- Mobile Menu -->
		<div
			class="md:hidden transition-all duration-300 ease-in-out max-h-0 overflow-hidden"
			id="mobile-menu"
		>
			<div class="py-4 space-y-4">
				{
					navigationLinks.map((link) => (
						<a
							href={link.href}
							class="block text-text-color hover:text-blue-400 transition-colors px-4 py-2"
						>
							{link.name}
						</a>
					))
				}
			</div>
		</div>
	</div>
</header>

<style>
	button:focus + ul,
	ul:hover {
		display: block;
	}
</style>

<script>
	// Mobile menu toggle with smooth animation
	const mobileMenuButton = document.getElementById('mobile-menu-button');
	const mobileMenu = document.getElementById('mobile-menu');
	let isMenuOpen = false;

	if (mobileMenuButton && mobileMenu) {
		mobileMenuButton.addEventListener('click', () => {
			isMenuOpen = !isMenuOpen;

			// Update max-height for smooth animation
			if (isMenuOpen) {
				mobileMenu.style.maxHeight = '100vh';
				mobileMenu.style.height = '100vh';
			} else {
				mobileMenu.style.maxHeight = '0';
			}
		});

		// Close menu when clicking on a link
		const mobileLinks = mobileMenu.querySelectorAll('a');
		mobileLinks.forEach((link) => {
			link.addEventListener('click', () => {
				isMenuOpen = false;
				mobileMenu.style.maxHeight = '0';
			});
		});

		// Update max-height on window resize
		window.addEventListener('resize', () => {
			if (isMenuOpen) {
				mobileMenu.style.maxHeight = '100vh';
			}
		});
	}
</script>
