---
import { languagesList } from '../i18n/ui';
import { useTranslations } from '../i18n/utils';

const pathPage = (globalThis as any).BASE_URL;
const currentLang = Astro.currentLocale || 'en';
const translations = useTranslations(currentLang as keyof typeof languagesList);

const successMessageTitle = translations('contact.email.success.title');
const successMessageDescription = translations(
	'contact.email.success.description',
);
const errorTitle = translations('contact.email.error.title');
const errorOptionalMessage = translations(
	'contact.email.error.optional.message',
);
const waitTitle = translations('contact.email.wait.title');
const waitPart1 = translations('contact.email.wait.part1');
const waitPart2 = translations('contact.email.wait.part2');
const connectionTitle = translations('contact.email.connection.title');
const connectionDescription = translations(
	'contact.email.connection.description',
);
const sendingTitle = translations('contact.email.sending.title');
const sendingDescription = translations('contact.email.sending.description');
const validationName = translations('contact.email.validation.name');
const validationEmail = translations('contact.email.validation.email');
const validationMessage = translations('contact.email.validation.message');
const validationForm = translations('contact.email.validation.form');
const validationError = translations('contact.email.validation.error');
---

<style>
	.custom-swal-popup {
		border-radius: 15px;
		border: 2px solid #4361ee;
		box-shadow: 0 0 20px rgba(67, 97, 238, 0.3);
		background: linear-gradient(145deg, #101c47, #242d52) !important;
	}

	.custom-swal-button {
		background: linear-gradient(145deg, #4361ee, #3451d1) !important;
		color: white !important;
		border-radius: 10px;
		padding: 12px 24px;
		font-weight: 600;
		transition: all 0.3s ease;
		border: none;
		text-transform: uppercase;
		letter-spacing: 0.5px;
	}

	.custom-swal-button:hover {
		background: linear-gradient(145deg, #3451d1, #2941b4) !important;
		transform: translateY(-2px);
		box-shadow: 0 5px 15px rgba(67, 97, 238, 0.3);
	}
</style>

<section id="contact" class="py-20 section-fade">
	<div class="container mx-auto px-4">
		<div class="max-w-5xl mx-auto">
			<h2 class="text-4xl font-bold mb-12 text-center">
				<span class="text-xl block mb-4 text-blue-500"
					>{translations('contact.subtitle')}</span
				>
				{translations('contact.title')}
				<span class="inline-block ml-2">üëã</span>
			</h2>

			<div class="grid md:grid-cols-2 gap-8 items-center">
				<div class="skill-card p-8 rounded-lg relative overflow-hidden">
					<div
						class="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-blue-600 to-purple-600"
					>
					</div>
					<form id="contactForm" class="space-y-6">
						<div class="space-y-2">
							<label class="text-sm font-medium text-blue-500"
								>{translations('contact.form.name')}</label
							>
							<input
								id="name"
								name="name"
								type="text"
								placeholder={translations(
									'contact.form.name_holder',
								)}
								class="w-full px-4 py-3 rounded-lg bg-gray-900/50 border border-blue-500/20 focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 focus:outline-none transition-all text-gray-200"
							/>
						</div>
						<div class="space-y-2">
							<label class="text-sm font-medium text-blue-500"
								>{translations('contact.form.email')}</label
							>
							<input
								type="email"
								id="email"
								name="email"
								placeholder={translations(
									'contact.form.email_holder',
								)}
								class="w-full px-4 py-3 rounded-lg bg-gray-900/50 border border-blue-500/20 focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 focus:outline-none transition-all text-gray-200"
							/>
						</div>
						<div class="space-y-2">
							<label class="text-sm font-medium text-blue-500"
								>{translations('contact.form.message')}</label
							>
							<textarea
								id="message"
								name="message"
								placeholder={translations(
									'contact.form.message_holder',
								)}
								rows="4"
								class="w-full px-4 py-3 rounded-lg bg-gray-900/50 border border-blue-500/20 focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 focus:outline-none transition-all text-gray-200 resize-none"
							></textarea>
						</div>
						<button
							type="submit"
							class="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white px-6 py-3 rounded-lg font-medium hover:from-blue-500 hover:to-purple-500 transition-all shadow-lg group glow"
						>
							<span
								class="inline-flex items-center justify-center gap-2"
							>
								<span
									>{
										translations(
											'contact.form.send_message',
										)
									}</span
								>
								<span
									class="text-xl group-hover:translate-x-1 transition-transform"
									>üõ∞Ô∏è</span
								>
							</span>
						</button>
					</form>
				</div>

				<div class="relative h-[400px] hidden md:block">
					<div class="absolute inset-0">
						<img
							src={`${pathPage}images/satellite.png`}
							alt="Space Station"
							class="w-24 absolute top-10 right-10 floating-delayed"
							loading="lazy"
						/>
						<img
							src={`${pathPage}images/astronaut.png`}
							alt="Floating Astronaut"
							class="w-52 absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 floating"
							loading="lazy"
						/>
						<img
							src={`${pathPage}images/planet.png`}
							alt="Planet"
							class="w-20 absolute bottom-20 left-20 floating-fast"
							loading="lazy"
						/>
						<div class="shooting-star"></div>
					</div>
				</div>
			</div>
		</div>
	</div>
</section>

<script
	is:inline
	set:html={`  
		window.successMessageTitle = ${JSON.stringify(successMessageTitle)};
		window.successMessageDescription = ${JSON.stringify(successMessageDescription)};
		window.errorTitle = ${JSON.stringify(errorTitle)};
		window.errorOptionalMessage = ${JSON.stringify(errorOptionalMessage)};
		window.waitTitle = ${JSON.stringify(waitTitle)};
		window.waitPart1 = ${JSON.stringify(waitPart1)};
		window.waitPart2 = ${JSON.stringify(waitPart2)};
		window.connectionTitle = ${JSON.stringify(connectionTitle)};
		window.connectionDescription = ${JSON.stringify(connectionDescription)};
		window.sendingTitle = ${JSON.stringify(sendingTitle)};
		window.sendingDescription = ${JSON.stringify(sendingDescription)};
		window.validationName = ${JSON.stringify(validationName)};
		window.validationEmail = ${JSON.stringify(validationEmail)};
		window.validationMessage = ${JSON.stringify(validationMessage)};
		window.validationForm = ${JSON.stringify(validationForm)};
		window.validationError = ${JSON.stringify(validationError)};
	`}
/>

<script>
	import Swal from 'sweetalert2';

	const customSwal = Swal.mixin({
		background: '#1a1b25',
		color: '#ffffff',
		confirmButtonColor: '#4361EE',
		buttonsStyling: true,
		customClass: {
			popup: 'custom-swal-popup',
			confirmButton: 'custom-swal-button',
		},
		timerProgressBar: false,
		timer: 2000,
		allowEscapeKey: false,
		allowOutsideClick: false,
		showConfirmButton: false,
		didOpen: () => {
			const swalContainer = Swal.getPopup();
			if (swalContainer) {
				const gradientBar = document.createElement('div');
				gradientBar.style.position = 'absolute';
				gradientBar.style.top = '0';
				gradientBar.style.left = '0';
				gradientBar.style.width = '100%';
				gradientBar.style.height = '4px';
				gradientBar.style.background =
					'linear-gradient(to rigth, #2563eb, #7c3aed)';
				gradientBar.style.borderTopLeftRadius = '10px';
				gradientBar.style.borderTopRightRadius = '10px';

				const progressBarContainer = document.createElement('div');
				progressBarContainer.style.width = '100%';
				progressBarContainer.style.height = '6px';
				progressBarContainer.style.background =
					'rgba(255, 255, 255, 0.2)';
				progressBarContainer.style.borderRadius = '4px';
				progressBarContainer.style.overflow = 'hidden';
				progressBarContainer.style.marginTop = '10px';
				progressBarContainer.style.position = 'relative';
				progressBarContainer.style.marginBottom = '0%';

				const progressBar = document.createElement('div');
				progressBar.id = 'swal-progress-bar';
				progressBar.style.width = '0%';
				progressBar.style.height = '100%';
				progressBar.style.background =
					'linear-gradient(to right, #2563eb, #7c3aed)';
				progressBar.style.transition = 'width 1.5s';

				progressBarContainer.appendChild(progressBar);
				swalContainer.prepend(gradientBar);
				swalContainer.appendChild(progressBarContainer);
				setTimeout(() => {
					progressBar.style.width = '100%';
				}, 100);
			}
		},
	});

	const titleStyle = (title: string) => {
		return `<span style="color: #4361ee !important; font-size: 24px; font-weight: bold; text-shadow: 0 0 10px rgba(67, 97, 238, 0.3);">${title}</span>`;
	};

	const messageStyle = (message: string) => {
		return `
				<div
					style="position: absolute; top: 0; left: 0; width: 100%; height: 4px; background: linear-gradient(to right, #2563eb, #7c3aed); border-top-left-radius: 10px; border-top-right-radius: 10px;">
				</div>
				<p>${message}</p>
			`;
	};

	const successMessage = () => {
		customSwal.fire({
			icon: 'success',
			title: titleStyle((window as any).successMessageTitle),
			html: messageStyle((window as any).successMessageDescription),
		});
	};

	const errorMessage = (
		message: string = (window as any).errorOptionalMessage,
	) => {
		customSwal.fire({
			icon: 'error',
			title: titleStyle((window as any).errorTitle),
			html: messageStyle(message),
		});
	};

	const cooldownMessage = (remainingTime: number) => {
		customSwal.fire({
			icon: 'warning',
			title: titleStyle((window as any).waitTitle),
			html: messageStyle(
				`${(window as any).waitPart1} ${remainingTime} ${(window as any).waitPart2}`,
			),
		});
	};

	const connectionErrorMessage = () => {
		customSwal.fire({
			icon: 'error',
			title: titleStyle((window as any).connectionTitle),
			html: messageStyle((window as any).connectionDescription),
		});
	};

	const sendingMessage = () => {
		customSwal.fire({
			title: titleStyle((window as any).sendingTitle),
			html: messageStyle((window as any).sendingDescription),
			allowEscapeKey: false,
			allowOutsideClick: false,
			didOpen: () => {
				customSwal.showLoading();
			},
		});
	};

	const validateEmail = (email: string): boolean => {
		const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
		return emailRegex.test(email);
	};

	const validateForm = (formData: {
		name: string;
		email: string;
		message: string;
	}): { isValid: boolean; error?: string } => {
		if (!formData.name || formData.name.trim().length === 0) {
			return {
				isValid: false,
				error: (window as any).validationName,
			};
		}

		if (!formData.email || !validateEmail(formData.email)) {
			return {
				isValid: false,
				error: (window as any).validationEmail,
			};
		}

		if (!formData.message || formData.message.trim().length === 0) {
			return {
				isValid: false,
				error: (window as any).validationMessage,
			};
		}

		return { isValid: true };
	};

	const contactForm = document.getElementById(
		'contactForm',
	) as HTMLFormElement | null;
	const nameInput = document.getElementById(
		'name',
	) as HTMLInputElement | null;
	const emailInput = document.getElementById(
		'email',
	) as HTMLInputElement | null;
	const messageInput = document.getElementById(
		'message',
	) as HTMLTextAreaElement | null;

	if (contactForm) {
		contactForm.addEventListener('submit', async function (event: Event) {
			event.preventDefault();

			const submitButton = contactForm.querySelector(
				'button[type="submit"]',
			) as HTMLButtonElement | null;

			if (!nameInput || !emailInput || !messageInput || !submitButton) {
				errorMessage((window as any).validationForm);
				return;
			}

			submitButton.disabled = true;
			submitButton.style.opacity = '0.6';
			submitButton.style.cursor = 'not-allowed';

			const formData = {
				name: nameInput.value.trim(),
				email: emailInput.value.trim(),
				message: messageInput.value.trim(),
			};

			// Validate form data
			const validation = validateForm(formData);
			if (!validation.isValid) {
				errorMessage(
					validation.error || (window as any).validationError,
				);
				submitButton.disabled = false;
				submitButton.style.opacity = '1';
				submitButton.style.cursor = 'pointer';
				return;
			}

			const lastSent = localStorage.getItem('lastEmailSent');
			const now = Date.now();
			const cooldown = 3 * 60 * 1000; // 3 minutes

			if (lastSent && now - parseInt(lastSent) < cooldown) {
				const remainingTime = Math.ceil(
					(cooldown - (now - parseInt(lastSent))) / 1000,
				);
				cooldownMessage(remainingTime);
				return;
			}

			sendingMessage();

			try {
				const response = await fetch((globalThis as any).BACKEND_URL, {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify(formData),
				});

				Swal.close();

				if (response.ok) {
					localStorage.setItem('lastEmailSent', now.toString());
					successMessage();
					contactForm.reset();
				} else {
					errorMessage();
				}
			} catch (error) {
				Swal.close();
				connectionErrorMessage();
			}

			submitButton.disabled = false;
			submitButton.style.opacity = '1';
			submitButton.style.cursor = 'pointer';
		});
	}
</script>
