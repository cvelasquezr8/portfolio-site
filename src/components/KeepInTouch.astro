---
import { languagesList } from '../i18n/ui';
import { useTranslations } from '../i18n/utils';

const pathPage = (globalThis as any).BASE_URL;
const currentLang = Astro.currentLocale || 'en';
const translations = useTranslations(currentLang as keyof typeof languagesList);
---

<section id="contact" class="py-20 section-fade">
	<div class="container mx-auto px-4">
		<div class="max-w-5xl mx-auto">
			<h2 class="text-4xl font-bold mb-12 text-center">
				<span class="text-xl block mb-4 text-blue-500"
					>{translations('contact.subtitle')}</span
				>
				{translations('contact.title')}
				<span class="inline-block ml-2">üëã</span>
			</h2>

			<div class="grid md:grid-cols-2 gap-8 items-center">
				<div class="skill-card p-8 rounded-lg relative overflow-hidden">
					<div
						class="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-blue-600 to-purple-600"
					>
					</div>
					<form id="contactForm" class="space-y-6">
						<div class="space-y-2">
							<label class="text-sm font-medium text-blue-500"
								>{translations('contact.form.name')}</label
							>
							<input
								id="name"
								name="name"
								type="text"
								placeholder={translations(
									'contact.form.name_holder',
								)}
								class="w-full px-4 py-3 rounded-lg bg-gray-900/50 border border-blue-500/20 focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 focus:outline-none transition-all text-gray-200"
							/>
						</div>
						<div class="space-y-2">
							<label class="text-sm font-medium text-blue-500"
								>{translations('contact.form.email')}</label
							>
							<input
								type="email"
								id="email"
								name="email"
								placeholder={translations(
									'contact.form.email_holder',
								)}
								class="w-full px-4 py-3 rounded-lg bg-gray-900/50 border border-blue-500/20 focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 focus:outline-none transition-all text-gray-200"
							/>
						</div>
						<div class="space-y-2">
							<label class="text-sm font-medium text-blue-500"
								>{translations('contact.form.message')}</label
							>
							<textarea
								id="message"
								name="message"
								placeholder={translations(
									'contact.form.message_holder',
								)}
								rows="4"
								class="w-full px-4 py-3 rounded-lg bg-gray-900/50 border border-blue-500/20 focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 focus:outline-none transition-all text-gray-200 resize-none"
							></textarea>
						</div>
						<button
							type="submit"
							class="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white px-6 py-3 rounded-lg font-medium hover:from-blue-500 hover:to-purple-500 transition-all shadow-lg group glow"
						>
							<span
								class="inline-flex items-center justify-center gap-2"
							>
								<span
									>{
										translations(
											'contact.form.send_message',
										)
									}</span
								>
								<span
									class="text-xl group-hover:translate-x-1 transition-transform"
									>üõ∞Ô∏è</span
								>
							</span>
						</button>
					</form>
				</div>

				<div class="relative h-[400px] hidden md:block">
					<div class="absolute inset-0">
						<img
							src={`${pathPage}images/satellite.png`}
							alt="Space Station"
							class="w-24 absolute top-10 right-10 floating-delayed"
							loading="lazy"
						/>
						<img
							src={`${pathPage}images/astronaut.png`}
							alt="Floating Astronaut"
							class="w-52 absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 floating"
							loading="lazy"
						/>
						<img
							src={`${pathPage}images/planet.png`}
							alt="Planet"
							class="w-20 absolute bottom-20 left-20 floating-fast"
							loading="lazy"
						/>
						<div class="shooting-star"></div>
					</div>
				</div>
			</div>
		</div>
	</div>
</section>

<script>
	import Swal from 'sweetalert2';

	const customSwal = Swal.mixin({
		background: '#0B0F1E',
		color: '#ffffff',
		confirmButtonColor: '#4361EE',
		cancelButtonColor: '#FF3D71',
		buttonsStyling: false,
		customClass: {
			popup: 'custom-swal-popup',
			title: 'custom-swal-title',
			confirmButton: 'custom-swal-button',
			cancelButton: 'custom-swal-cancel-button',
		},
	});

	const successMessage = () => {
		customSwal.fire({
			icon: 'success',
			title: 'Mission Accomplished! üöÄ',
			text: 'Your message has been successfully sent! We will contact you soon.',
			confirmButtonText: 'Roger That! ‚úÖ',
		});
	};

	const errorMessage = (message: string = 'There was an issue sending your message. Please try again later.') => {
		customSwal.fire({
			icon: 'error',
			title: 'Houston, We Have a Problem! ‚ùå',
			text: message,
			confirmButtonText: 'Retry üîÅ',
		});
	};

	const cooldownMessage = (remainingTime: number) => {
		customSwal.fire({
			icon: 'warning',
			title: 'Hold Your Rockets! ‚è≥',
			text: `Please wait ${remainingTime} seconds before sending another message.`,
			confirmButtonText: 'Understood üõ∞Ô∏è',
		});
	};

	const connectionErrorMessage = () => {
		customSwal.fire({
			icon: 'error',
			title: 'Lost in Space... üåå',
			text: `We couldn't connect to the server. Check your internet connection.`,
			confirmButtonText: 'Retry Signal üì°',
		});
	};

	const validateEmail = (email: string): boolean => {
		const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
		return emailRegex.test(email);
	};

	const validateForm = (formData: { name: string; email: string; message: string }): { isValid: boolean; error?: string } => {
		if (!formData.name || formData.name.trim().length < 2) {
			return {
				isValid: false,
				error: 'Name must be at least 2 characters long! üë®‚ÄçüöÄ',
			};
		}

		if (!formData.email || !validateEmail(formData.email)) {
			return {
				isValid: false,
				error: 'Please enter a valid email address! üìß',
			};
		}

		if (!formData.message || formData.message.trim().length < 10) {
			return {
				isValid: false,
				error: 'Message must be at least 10 characters long! üìù',
			};
		}

		return { isValid: true };
	};

	const contactForm = document.getElementById(
		'contactForm',
	) as HTMLFormElement | null;
	const nameInput = document.getElementById(
		'name',
	) as HTMLInputElement | null;
	const emailInput = document.getElementById(
		'email',
	) as HTMLInputElement | null;
	const messageInput = document.getElementById(
		'message',
	) as HTMLTextAreaElement | null;

	if (contactForm) {
		contactForm.addEventListener('submit', async function (event: Event) {
			event.preventDefault();

			if (!nameInput || !emailInput || !messageInput) {
				errorMessage('Form elements not found. Please refresh the page.');
				return;
			}

			const formData = {
				name: nameInput.value.trim(),
				email: emailInput.value.trim(),
				message: messageInput.value.trim(),
			};

			// Validate form data
			const validation = validateForm(formData);
			if (!validation.isValid) {
				errorMessage(validation.error || 'Please check your input!');
				return;
			}

			const lastSent = localStorage.getItem('lastEmailSent');
			const now = Date.now();
			const cooldown = 3 * 60 * 1000; // 3 minutes

			if (lastSent && now - parseInt(lastSent) < cooldown) {
				const remainingTime = Math.ceil(
					(cooldown - (now - parseInt(lastSent))) / 1000,
				);
				cooldownMessage(remainingTime);
				return;
			}

			try {
				const response = await fetch(
					'https://email-service-production-e23d.up.railway.app/email/send/',
					{
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify(formData),
					},
				);

				if (response.ok) {
					localStorage.setItem('lastEmailSent', now.toString());
					successMessage();
					contactForm.reset();
				} else {
					errorMessage();
				}
			} catch (error) {
				connectionErrorMessage();
			}
		});
	}
</script>

<style>
	.custom-swal-popup {
		border-radius: 15px;
		border: 2px solid #4361EE;
		box-shadow: 0 0 20px rgba(67, 97, 238, 0.3);
		background: linear-gradient(145deg, #0B0F1E, #1a1f35) !important;
	}

	.custom-swal-title {
		color: #4361EE !important;
		font-size: 24px;
		font-weight: bold;
		text-shadow: 0 0 10px rgba(67, 97, 238, 0.3);
	}

	.custom-swal-button {
		background: linear-gradient(145deg, #4361EE, #3451d1) !important;
		color: white !important;
		border-radius: 10px;
		padding: 12px 24px;
		font-weight: 600;
		transition: all 0.3s ease;
		border: none;
		text-transform: uppercase;
		letter-spacing: 0.5px;
	}

	.custom-swal-button:hover {
		background: linear-gradient(145deg, #3451d1, #2941b4) !important;
		transform: translateY(-2px);
		box-shadow: 0 5px 15px rgba(67, 97, 238, 0.3);
	}

	.custom-swal-cancel-button {
		background: linear-gradient(145deg, #FF3D71, #ff1f5a) !important;
		color: white !important;
		border-radius: 10px;
		padding: 12px 24px;
		font-weight: 600;
		transition: all 0.3s ease;
		border: none;
		text-transform: uppercase;
		letter-spacing: 0.5px;
	}

	.custom-swal-cancel-button:hover {
		background: linear-gradient(145deg, #ff1f5a, #ff0043) !important;
		transform: translateY(-2px);
		box-shadow: 0 5px 15px rgba(255, 61, 113, 0.3);
	}
</style>